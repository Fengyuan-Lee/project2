[
  {
    "title": "HTML light and dark mode switch",
    "description": "HTML Structure HTML documents already contain basic elements for switching between light and dark modes. There is a class='dark' in the <body> tag to initialize the class='dark' mode. In the navigation bar there is a check box with id='changeImageUrl', click the check box to trigger the theme switch. JavaScript logic The JavaScript code binds a click-event handler to all the input elements. In this event handler, we first get the <body>, <nav>, and <footer> elements in the current document. Next, we check that the check box named theme is selected. If selected, remove the dark class and add the light class; Otherwise, the opposite operation is performed. Function description Initial state： When the page loads, it defaults to dark mode, meaning that the <body>, <nav>, and <footer> elements all have dark classes. The check box is unchecked by default. The check box is unchecked by default. User interaction： When the user clicks the check box, an event handler is triggered. The event handler takes the <body>, <nav>, and <footer> elements in the document and changes their classes based on the state of the check box. If the check box is selected, the page changes to light mode: The dark class for the <body>, <nav>, and <footer> elements is removed and the light class is added. If the check box is not selected, the page reverts to dark mode: The light class for the <body>, <nav>, and <footer> elements is removed, and the dark class is added. Style change： The .dark and .light classes are defined in CSS to control colors and styles in different modes. The .dark class typically contains darker background colors and lighter text colors. The .light class typically contains a lighter background color and a darker text color. Responsiveness： When the user switches themes, all relevant elements on the page immediately update their styles to reflect the new theme. This immediate feedback lets users know that their actions have been recognized by the system. Sum up The implementation provides a simple light-dark mode switching function, with a check box to trigger the theme switching. When the user interacts with this check box, the style of the entire page changes accordingly, providing a different visual experience. Although the implementation is relatively basic, it is sufficient to meet basic requirements. If further functionality is needed, such as remembering user preferences or supporting more customization options, it can be achieved by extending JavaScript code and CSS styles.",
    "content": "<h4 class='my-4'>HTML Structure</h4> <div class='section row'> <div class='col-6 text-left'> <p>HTML documents already contain basic elements for switching between light and dark modes. There is a class='dark' in the <code>&lt;body&gt;</code> tag to initialize the <code>class='dark'</code> mode. In the navigation bar there is a check box with <code>id='changeImageUrl'</code>, click the check box to trigger the theme switch. </p> </div> <div class='col-6'><img src='./img/theme1.png' class='img-thumbnail'></div> </div> <h4 class='my-4'>JavaScript logic</h4> <p>The JavaScript code binds a click-event handler to all the input elements. In this event handler, we first get the <code>&lt;body&gt;</code>, <code>&lt;nav&gt;</code>, and <code>&lt;footer&gt;</code> elements in the current document. Next, we check that the check box named <code>theme</code> is selected. If selected, remove the <code>dark</code> class and add the <code>light</code> class; Otherwise, the opposite operation is performed. </p> <div class='section row'> <div class='col-6'><img src='./img/theme2.png' class='img-thumbnail'></div> <div class='col-6 text-left'> <h4>Function description</h4> <ol> <li> <p><strong>Initial state</strong>：</p> <ul> <li>When the page loads, it defaults to dark mode, meaning that the <code>&lt;body&gt;</code>, <code>&lt;nav&gt;</code>, and <code>&lt;footer&gt;</code> elements all have <code>dark</code> classes. The check box is unchecked by default. </li> <li>The check box is unchecked by default.</li> </ul> </li> <li> <p><strong>User interaction</strong>：</p> <ul> <li>When the user clicks the check box, an event handler is triggered.</li> <li>The event handler takes the <code>&lt;body&gt;</code>, <code>&lt;nav&gt;</code>, and <code>&lt;footer&gt;</code> elements in the document and changes their classes based on the state of the check box. </li> <li>If the check box is selected, the page changes to light mode: <ul> <li> The dark class for the <code>&lt;body&gt;</code>, <code>&lt;nav&gt;</code>, and <code>&lt;footer&gt;</code> elements is removed and the <code>light</code> class is added. </li> </ul> </li> <li>If the check box is not selected, the page reverts to dark mode: <ul> <li> The light class for the <code>&lt;body&gt;</code>, <code>&lt;nav&gt;</code>, and <code>&lt;footer&gt;</code> elements is removed, and the <code>dark</code> class is added. </li> </ul> </li> </ul> </li> <li> <p><strong>Style change</strong>：</p> <ul> <li> The <code>.dark</code> and <code>.light</code> classes are defined in CSS to control colors and styles in different modes.</li> <li> The <code>.dark</code> class typically contains darker background colors and lighter text colors. </li> <li> The <code>.light</code> class typically contains a lighter background color and a darker text color. </li> </ul> </li> <li> <p><strong>Responsiveness</strong>：</p> <ul> <li>When the user switches themes, all relevant elements on the page immediately update their styles to reflect the new theme.</li> <li>This immediate feedback lets users know that their actions have been recognized by the system. </li> </ul> </li> </ol> </div> </div> <h3 class='my-4'>Sum up</h3> <p>The implementation provides a simple light-dark mode switching function, with a check box to trigger the theme switching. When the user interacts with this check box, the style of the entire page changes accordingly, providing a different visual experience. Although the implementation is relatively basic, it is sufficient to meet basic requirements. If further functionality is needed, such as remembering user preferences or supporting more customization options, it can be achieved by extending JavaScript code and CSS styles. </p>",
    "reviewCount": 68
  },
  {
    "title": "Dynamic blog implementation process",
    "description": "Dynamic blog implementation process 1.Data preparation Data file:The data/posts.json file contains the data for the blog list, where each entry contains a title, description, and content. Sample data format: [{'title':'','description':'','content':''}] 2.Blog list page(blog.html) Page structure: Contains a .blog-list container that displays a list of blog entries. JavaScript logic(scripts.js): Once the page has loaded, use fetch to fetch the blog data from data/posts.json. Iterate through each item in the data and create a new div element for each blog post, containing the title and description. Set up the click event listener to navigate to the blog details page when the user clicks on the title or description. 3.Blog detail page(blog-desc.html) Page structure: Contains a title (#blog-desc-title) and a content container (.blog-desc-content). JavaScript logic(scripts.js): Once the page has loaded, use fetch to fetch the blog data from data/posts.json. Find the corresponding blog entry based on the title in the URL parameter. Fill the title and content of the found blog entry into the appropriate element on the page. Process steps Visit the blog list page(blog.html): When the page loads, the scripts.js script starts to execute. Use fetch to request the data/posts.json file to get the blog data. Iterate through the blog data, generate a div element for each blog, and add it to the .blog-list container. Each div element contains a title and description, and adds a click event for both elements, and when the user clicks, navigates to the blog details page. Navigate to the blog details page(blog-desc.html): When a user clicks on a post in the blog list, the title of the blog is passed through the URL parameter. When the page loads, the scripts.js script starts to execute. Use fetch to request the data/posts.json file to get the blog data. Find the corresponding blog entry based on the title in the URL parameter. Fill the title and content of the blog entry into the title and content container of the page, respectively. Sum up This dynamic blog implementation process realizes the dynamic rendering of the blog list and the content display of the blog details page through a simple front-end technology. fetch API was used to fetch JSON data and DOM manipulation to dynamically build page elements. This approach not only improves the user experience, but also makes the management of blog content more flexible and efficient.",
    "content": "<h3>Dynamic blog implementation process</h3> <h4>1.Data preparation</h4> <ul> <li><strong>Data file</strong>:The <code> data/posts.json </code> file contains the data for the blog list, where each entry contains a <code>title</code>, <code>description</code>, and <code>content</code>. </li> <li><strong>Sample data format</strong>:<p><code>[{'title':'','description':'','content':''}]</code></p> </li> </ul> <h4>2.Blog list page(<code>blog.html</code>)</h4> <div class='section row'> <div class='col-6'> <ul> <li><strong>Page structure</strong>:<ul> <li>Contains a <code>.blog-list</code> container that displays a list of blog entries.</li> </ul> </li> <li><strong>JavaScript logic</strong>(<code>scripts.js</code>):<ul> <li>Once the page has loaded, use <code>fetch</code> to fetch the blog data from <code>data/posts.json</code>. </li> <li>Iterate through each item in the data and create a new <code>div</code> element for each blog post, containing the title and description.</li> <li>Set up the click event listener to navigate to the blog details page when the user clicks on the title or description.</li> </ul> </li> </ul> </div> <div class='col-6'><img src='./img/blog1.png' class='img-thumbnail' /></div> </div> <h4>3.Blog detail page(<code>blog-desc.html</code>)</h4> <div class='section row'> <div class='col-6'><img src='./img/blog2.png' class='img-thumbnail' /></div> <div class='col-6'> <ul> <li><strong>Page structure</strong>:<ul> <li>Contains a title (<code>#blog-desc-title</code>) and a content container (<code>.blog-desc-content</code>).</li> </ul> </li> <li><strong>JavaScript logic</strong>(<code>scripts.js</code>):<ul> <li>Once the page has loaded, use <code>fetch</code> to fetch the blog data from <code>data/posts.json</code>. </li> <li>Find the corresponding blog entry based on the <code>title</code> in the URL parameter.</li> <li>Fill the title and content of the found blog entry into the appropriate element on the page. </li> </ul> </li> </ul> </div> </div> <h5>Process steps</h5> <div class='section row'> <div class='col-6'> <ol> <li> <p><strong>Visit the blog list page</strong>(<code>blog.html</code>):</p> <ul> <li>When the page loads, the <code>scripts.js</code> script starts to execute.</li> <li>Use <code>fetch</code> to request the <code>data/posts.json</code> file to get the blog data. </li> <li>Iterate through the blog data, generate a <code>div</code> element for each blog, and add it to the <code>.blog-list</code> container.</li> <li>Each <code>div</code> element contains a title and description, and adds a click event for both elements, and when the user clicks, navigates to the blog details page.</li> </ul> </li> <li> <p><strong>Navigate to the blog details page</strong>(<code>blog-desc.html</code>):</p> <ul> <li>When a user clicks on a post in the blog list, the title of the blog is passed through the URL parameter.</li> <li>When the page loads, the <code>scripts.js</code> script starts to execute.</li> <li>Use <code>fetch</code> to request the <code>data/posts.json</code> file to get the blog data. </li> <li>Find the corresponding blog entry based on the title in the URL parameter.</li> <li>Fill the title and content of the blog entry into the title and content container of the page, respectively.</li> </ul> </li> </ol> </div> <div class='col-6'><img src='./img/blog3.png' class='img-thumbnail' /></div> </div> <h3>Sum up</h3> <p>This dynamic blog implementation process realizes the dynamic rendering of the blog list and the content display of the blog details page through a simple front-end technology. <code>fetch</code> API was used to fetch JSON data and DOM manipulation to dynamically build page elements. This approach not only improves the user experience, but also makes the management of blog content more flexible and efficient. </p>",
    "reviewCount": 32
  }
]
